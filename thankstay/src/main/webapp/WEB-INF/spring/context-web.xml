<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd  http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.2.xsd ">

	<!-- 
		spring mvc관련 어노테이션을 분석하고, 적절한 처리를 담당하는 클래스들을 스프링 컨테이너의 빈으로 등록시킨다.
		따라서, 어노테이션을 사용해서 spring mvc를 활용한 웹 애플리케이션을 개발할 수 있게 한다.
		spring mvc 관련 어노테이션
			@Controller, @RestController, @ControllerAdvice
			@RequestMapping, @GetMapping, @PostMapping, @PutMapping, @DeleteMapping
			@RequestParam, @PathVariable, @ModelAttribute, @Valid
			@RequestBody, @ResponseBody
			@SessionAttributes
			@ExceptionHandler, @InitBind
	 -->
	<mvc:annotation-driven>
			<mvc:argument-resolvers>
				<!--
					사용자 정의 HandlerMethodArgumentResolver 를 등록함
					요청핸들러의 매개변수에 @LoginUser 어노테이션이 지정되어 있을 때 실행되는 ArgumentResolver를 등록함
				-->
				<bean class="com.tt.web.argumentResolver.LoginUserArgumentResolver" />
			</mvc:argument-resolvers>
	</mvc:annotation-driven>
	
	<!-- 
		컨트롤러의 요청핸들러 메소드 실행전/실행후 처리를 담당하는 인터셉터를 스프링의 빈으로 등록함
		<mvc:interceptors /> 
			사용자정의 인터셉터들을 등록시키는 태그다.
		<mvc:interceptor />
			사용자정의 인터셉터 하나를 등록시키는 태그다.
		<mvc:mapping path="" />
			사용자정의 인터셉터를 실행할 요청 경로를 정의한다.
		<mvc:exclude-mapping path="" />
			사용자정의 인터셉터를 실행할 필요가 없는 요청경로를 정의한다.
		경로 작성시 wildCard 사용하기
			*은 임의의 경로다
			**은 하위경로를 포함하는 임의의 경로다
			작성예
				/app/*는 	/app/login, /app/logout, /app/register 경로와 매핑된다.
				/app/**은	/app/login, /app/logout, /app/register 경로와 매핑되고,
							/app/product/list, /app/product/cart,
							/app/order/form, /app/order/list 경로와 매핑된다.
							
				아래의 /**은 	localhost/spring-mvc/, localhost/spring-mvc/login, localhost/spring-mvc/logout
							localhost/spring-mvc/user/info, localhost/spring-mvc/product/list, 
							localhost/spring-mvc/product/addCart 등의 경로와 매핑된다.
	 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<!-- 모든 경로의 요청에 대해서 인터셉터가 실행된다.  -->
			<mvc:mapping path="/**"/>
			<!-- /resource로 시작하는 모든 경로의 요청에 대해서 인터셉터를 실행하지 않는다. -->
			<mvc:exclude-mapping path="/resources/**"/>
			<!-- <bean class="com.sample.web.interceptor.LoggingInterceptor"></bean> -->
			<bean class="com.tt.web.interceptor.LoginCheckInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	
	<!-- 
		정적자원 매핑(이미지, CSS, javascript 소스 등)
		클라이언트의 요청이 "/resources/**" 패턴과 일치하는 요청인 경우
		컨트롤러를 실행하지 않고 바로, location에서 지정한 경로에서 해당 자원을 찾아서 내려보낸다. 
	 -->
	<mvc:resources mapping="/resources/**" location="/resources/" />

	<bean id="tilesConfigurer" class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions">
			<list>
				<value>/WEB-INF/spring/tiles.xml</value>
			</list>
		</property>
	</bean>

	<!-- tilesViewResolver를 이용하여 화면을 표시한다. -->
	<bean id="tilesViewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass" value="org.springframework.web.servlet.view.tiles3.TilesView" />
		<property name="order" value="1" />
	</bean>
	<!-- 
		JSP 기반의 웹 애플리케이션인 경우 ViewResolver 설정하기
			* InternalResourceViewResolver를 기본 뷰리졸브로 등록한다.
				* InternalResourceViewResolver는 InternalResourceView, JstlView, RedirectView 중
				  하나를 반환한다.
				* 컨트롤러의 요청핸들러 메소드에서 jsp 파일의 전체 경로를 짧게 작성하게 위해서 몇가지 설정을 추가한다. 
				* prefix와 suffix는 각각 요청핸들러 메소드가 반환하는 뷰이름의 앞과 뒤에 추가될 문자열이다.
			작성예
				@RequestMapping("/")
				public String home() {
					return "home";
				}
				* 요청핸들러 메소드가 ModelAndView를 반환하지 않음
				* 요청핸들러 메소드가 뷰이름만 반환함.
				* HandlerAdapter는 뷰이름이 포함된 ModelAndView객체를 생성해서 DispatcherServlet에게 반환함
				* DispatcherServlet은 ModelAndView객체에 View객체가 들어있지 않으므로, 
				  InternalResourceViewResolver에게 뷰이름 전달하고, 적절한 뷰 객체를 요청함.
				* InternalResourceViewResolver는 뷰이름을 분석해서
					"redirect:"로 시작하면 RedirectView객체에 뷰이름을 담고, RedirectView를 반환함.
					"redirect:"로 시작하지않으면 JstlView객체에 /WEB-INF/views/home.jsp를 담고,
					                        JstlView를 반환함
				* DispatcherServlet은 전달받은 뷰객체(RedirectView 혹은 JstlView)의 render()를 실행함
					RedirectView인 경우 클라이언트에게 재요청 URL이 응답으로 전달됨
					JstlView인 경우 지정된 JSP페이지로 내부이동해서 JSP를 실행함 -> HTML 컨텐츠가 응답으로 전달됨
	 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
		<property name="order"  value="2" />
	</bean>

	<!--
		com.sample.web.controller 패키지의 클래스들을 자동으로 스프링 컨테이너의 빈으로 등록시킨다.
		주로 @Controller, @RestController 어노테이션이 지정되어 있는 컨트롤러 클래스가 스프링의 빈으로 자동 등록된다.
	 -->
	<context:component-scan base-package="com.tt.Common">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
	</context:component-scan>

	<context:component-scan base-package="com.tt.User">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
	</context:component-scan>

	<context:component-scan base-package="com.tt.Host">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
	</context:component-scan>

	<context:component-scan base-package="com.tt.Admin">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
	</context:component-scan>

	<context:component-scan base-package="com.tt.Lodging">
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Service"/>
	</context:component-scan>
</beans>







